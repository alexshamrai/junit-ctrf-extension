plugins {
    id 'java'
    id 'org.gradle.test-retry' version '1.6.4'
}

group = rootProject.group
version = rootProject.ext.projectVersion

apply from: rootProject.file('gradle/timeline-visualization.gradle')

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform("org.junit:junit-bom:${rootProject.ext.junitVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation project(':')
}

def configureThreads(Test task) {
    def threads = System.getProperty("threads")
    println "${task.name} - Configured number of threads: ${threads ?: 'not set'}"

    if (threads?.isInteger()) {
        def threadsNumber = threads.toInteger()
        if (threadsNumber > 1) {
            task.systemProperties += [
                    'junit.jupiter.execution.parallel.enabled'                   : true,
                    'junit.jupiter.execution.parallel.mode.default'              : 'concurrent',
                    'junit.jupiter.execution.parallel.mode.classes.default'      : 'concurrent',
                    'junit.jupiter.execution.parallel.config.strategy'           : 'fixed',
                    'junit.jupiter.execution.parallel.config.fixed.parallelism'  : threadsNumber,
                    'junit.jupiter.execution.parallel.config.fixed.max-pool-size': threadsNumber
            ]
        }
    } else {
        println "Invalid or missing 'threads' property. Default settings will be used."
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    systemProperties += System.properties.findAll { k, v -> k.toString().startsWith("ctrf") }

    retry {
        maxRetries = 1
        maxFailures = 1000
        failOnPassedAfterRetry = false
    }

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }

    configureThreads(it)
}

test {
    ignoreFailures = true
    finalizedBy(addTimelineVisualizationToCtrfReport)
}

// Explicitly mark this module as not for publishing
jar {
    enabled = true  // We want the jar for local use
    archiveClassifier = 'tests'  // Mark as tests artifact
}

// Explicitly disable all publishing tasks
tasks.matching { it.name.contains('publish') }.configureEach {
    enabled = false
}

// Disable Maven publication configurations
tasks.withType(GenerateMavenPom).configureEach {
    enabled = false
}

tasks.withType(PublishToMavenRepository).configureEach {
    enabled = false
}

tasks.withType(PublishToMavenLocal).configureEach {
    enabled = false
}