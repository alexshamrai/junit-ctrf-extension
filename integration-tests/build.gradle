plugins {
    id 'java'
}

group = 'io.github.alexshamrai'
version = '0.3.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:2.0.17'
    implementation 'ch.qos.logback:logback-classic:1.5.18'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.module:jackson-module-jsonSchema:2.15.2'
    implementation 'com.github.java-json-tools:json-schema-validator:2.2.14'

    testImplementation platform('org.junit:junit-bom:5.12.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.platform:junit-platform-launcher'
    testImplementation project(':')

    testImplementation 'org.assertj:assertj-core:3.25.3'
}

def configureThreads(Test task) {
    def threads = System.getProperty("threads")
    println "${task.name} - Configured number of threads: ${threads ?: 'not set'}"

    if (threads?.isInteger()) {
        def threadsNumber = threads.toInteger()
        if (threadsNumber > 1) {
            task.systemProperties += [
                    'junit.jupiter.execution.parallel.enabled'                   : true,
                    'junit.jupiter.execution.parallel.mode.default'              : 'concurrent',
                    'junit.jupiter.execution.parallel.mode.classes.default'      : 'concurrent',
                    'junit.jupiter.execution.parallel.config.strategy'           : 'fixed',
                    'junit.jupiter.execution.parallel.config.fixed.parallelism'  : threadsNumber,
                    'junit.jupiter.execution.parallel.config.fixed.max-pool-size': threadsNumber
            ]
        }
    } else {
        println "Invalid or missing 'threads' property. Default settings will be used."
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }

    configureThreads(it)
}

tasks.register('generateCtrfReport', Test) {
    description = 'Runs specific test classes to generate the CTRF report'
    group = 'verification'

    useJUnitPlatform {
        includeTags 'fake'
    }

    ignoreFailures = true
}

tasks.register('validateCtrfReport', Test) {
    description = 'Validates the CTRF report against the schema and verifies test statuses'
    group = 'verification'

    useJUnitPlatform {
        include '**/CtrfSchemaValidationTest.class'
        include '**/CtrfLogicTest.class'
    }

    dependsOn generateCtrfReport
}

check.dependsOn validateCtrfReport

// Explicitly mark this module as not for publishing
jar {
    enabled = true  // We want the jar for local use
    archiveClassifier = 'tests'  // Mark as tests artifact
}

// Explicitly disable all publishing tasks
tasks.matching { it.name.contains('publish') }.configureEach {
    enabled = false
}

// Disable Maven publication configurations
tasks.withType(GenerateMavenPom).configureEach {
    enabled = false
}

tasks.withType(PublishToMavenRepository).configureEach {
    enabled = false
}

tasks.withType(PublishToMavenLocal).configureEach {
    enabled = false
}